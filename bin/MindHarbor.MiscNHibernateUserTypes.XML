<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MindHarbor.MiscNHibernateUserTypes</name>
    </assembly>
    <members>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.EncryptedStringType.Equals(System.Object,System.Object)">
            <summary>
            
                        Compare two instances of the class mapped by this type for persistent "equality"
                        ie. equality of persistent state
                        
            </summary>
            
            <param name="x"></param>
            <param name="y"></param>
            <returns>
            
            </returns>
            
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.EncryptedStringType.GetHashCode(System.Object)">
            <summary>
            Get a hashcode for the instance, consistent with persistence "equality" 
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.EncryptedStringType.NullSafeGet(System.Data.IDataReader,System.String[],System.Object)">
            <summary>
            
                        Retrieve an instance of the mapped class from a JDBC resultset.
                        Implementors should handle possibility of null values.
                        
            </summary>
            
            <param name="rs">a IDataReader</param>
            <param name="names">column names</param>
            <param name="owner">the containing entity</param>
            <returns>
            
            </returns>
            
            <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.EncryptedStringType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32)">
            <summary>
            
                        Write an instance of the mapped class to a prepared statement.
                        Implementors should handle possibility of null values.
                        A multi-column type should be written to parameters starting from index.
                        
            </summary>
            
            <param name="cmd">a IDbCommand</param>
            <param name="value">the object to write</param>
            <param name="index">command parameter index</param>
            <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MindHarbor.MiscNHibernateUserTypes.EncryptedStringType.DeepCopy(System.Object)" -->
        <member name="M:MindHarbor.MiscNHibernateUserTypes.EncryptedStringType.Replace(System.Object,System.Object,System.Object)">
            <summary>
            
                        During merge, replace the existing (<paramref name="target" />) value in the entity
                        we are merging to with a new (<paramref name="original" />) value from the detached
                        entity we are merging. For immutable objects, or null values, it is safe to simply
                        return the first parameter. For mutable objects, it is safe to return a copy of the
                        first parameter. For objects with component values, it might make sense to
                        recursively replace component values.
                        
            </summary>
            
            <param name="original">the value from the detached entity being merged</param>
            <param name="target">the value in the managed entity</param>
            <param name="owner">the managed entity</param>
            <returns>
            the value to be merged
            </returns>
            
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.EncryptedStringType.Assemble(System.Object,System.Object)">
            <summary>
            
                        Reconstruct an object from the cacheable representation. At the very least this
                        method should perform a deep copy if the type is mutable. (optional operation)
                        
            </summary>
            
            <param name="cached">the object to be cached</param>
            <param name="owner">the owner of the cached object</param>
            <returns>
            a reconstructed object from the cachable representation
            </returns>
            
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.EncryptedStringType.Disassemble(System.Object)">
            <summary>
            
                        Transform the object into its cacheable representation. At the very least this
                        method should perform a deep copy if the type is mutable. That may not be enough
                        for some implementations, however; for example, associations must be cached as
                        identifier values. (optional operation)
                        
            </summary>
            
            <param name="value">the object to be cached</param>
            <returns>
            a cacheable representation of the object
            </returns>
            
        </member>
        <member name="P:MindHarbor.MiscNHibernateUserTypes.EncryptedStringType.SqlTypes">
            <summary>
            
                        The SQL types for the columns mapped by this type. 
                        
            </summary>
            
        </member>
        <member name="P:MindHarbor.MiscNHibernateUserTypes.EncryptedStringType.ReturnedType">
            <summary>
            
                        The type returned by 
            <c>NullSafeGet()</c>
            </summary>
            
        </member>
        <member name="P:MindHarbor.MiscNHibernateUserTypes.EncryptedStringType.IsMutable">
            <summary>
            
                        Are objects of this type mutable?
                        
            </summary>
            
        </member>
        <member name="T:MindHarbor.MiscNHibernateUserTypes.HeterogeneousProperty">
            <summary>
            a heterogeneous custom property
            </summary>
            <remarks>
            it was used in <see cref="T:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict"/>
            </remarks>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousProperty.#ctor(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="val"></param>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousProperty.Equals(MindHarbor.MiscNHibernateUserTypes.HeterogeneousProperty)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
            
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousProperty.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
            
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousProperty.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:MindHarbor.MiscNHibernateUserTypes.HeterogeneousProperty.Value">
            <summary>
            Gets and sets the value 
            </summary>
        </member>
        <member name="P:MindHarbor.MiscNHibernateUserTypes.HeterogeneousProperty.ValueType">
            <summary>
            Gets the Type of this property
            </summary>
        </member>
        <member name="P:MindHarbor.MiscNHibernateUserTypes.HeterogeneousProperty.Name">
            <summary>
            Gets the name of the property
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict" -->
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.#ctor(System.Collections.Generic.IDictionary{System.String,MindHarbor.MiscNHibernateUserTypes.HeterogeneousProperty})">
            <summary>
            </summary>
            <param name="wrapped"></param>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.Add(System.String,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            
            <param name="value">The object to use as the value of the element to add.</param>
            <param name="key">The object to use as the key of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.GetValueType(System.String)">
            <summary>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.TryGetValue(System.String,System.Object@)">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.Equals(MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
            
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
            
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.Item(System.String)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            
            <returns>
            The element with the specified key. Returns null if not found
            </returns>
            
            <param name="key">The key of the element to get or set.</param>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
             
        </member>
        <member name="P:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            
        </member>
        <member name="P:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            
        </member>
        <member name="P:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
        </member>
        <member name="P:MindHarbor.MiscNHibernateUserTypes.HeterogeneousPropertyDict.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
            
        </member>
    </members>
</doc>
