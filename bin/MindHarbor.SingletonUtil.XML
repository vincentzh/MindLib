<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MindHarbor.SingletonUtil</name>
    </assembly>
    <members>
        <member name="T:MindHarbor.SingletonUtil.SingletonInstanceLoader">
            <summary>
            A loader writen to load instance of singleton types
            </summary>
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonInstanceLoader.LoadByConstrutor(System.Type)">
            <summary>
            Load the singleton of the type by constructor 
            </summary>
            <param name="t"></param>
            <returns>null if there is no public non-parameter constructor</returns>
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonInstanceLoader.LoadByInstanceProperty(System.Type)">
            <summary>
            Load the singleton by static property named "Instance"
            </summary>
            <param name="t"></param>
            <returns>return null if there is no such 
            </returns>
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonInstanceLoader.Load(System.Type)">
            <summary>
            Load the singleton by all means
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonInstanceLoader.Load``1(System.String)">
            <summary>
            Load type by name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonInstanceLoader.Load``1">
            <summary>
            Generic version of Load(Type t)
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <remarks>
            <see cref="!:SingletonInstanceLoader.Load(Type t)"/>
            </remarks>
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonInstanceLoader.Loadable(System.Type)">
            <summary>
            judge if Type t is a loadable singleton
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MindHarbor.SingletonUtil.SingletonRepository" -->
        <member name="M:MindHarbor.SingletonUtil.SingletonRepository.UnsafeRegister(System.Type)">
            <summary>
            register a type which is not threadsafe
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonRepository.Find``1">
            <summary>
            Find the singleton of the type T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <see cref="!:Find(Type t)"/>
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonRepository.Find(System.Type)">
            <summary>
            Find the singleton of the Type t
            </summary>
            <param name="t"></param>
            <returns></returns>
            <remarks>
            This is a none generic version of Find&lt;T&gt;()
            This will even found singelton for types that are not registered in the system but have a static Instance property
            </remarks>
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonRepository.FindAll``1">
            <summary>
            polymorphically find all singletons that assignable to T 
            </summary>
            <typeparam name="T"></typeparam>
            <returns>the singletons of the Registered types in the repository</returns>
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonRepository.Register(System.Type)">
            <summary>
            Dynamically register a type to the repository
            </summary>
            <param name="t"></param>
            <remarks>
            if the t is already registered, this method will do nothing. 
            </remarks>
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonRepository.AddAssembly(System.Reflection.Assembly)">
            <summary>
            Add an assembly to under the management of the repository
            </summary>
            <param name="a"></param>
            <remarks>
            This will register all the types in the setting file in this assembly
            </remarks>
        </member>
        <member name="P:MindHarbor.SingletonUtil.SingletonRepository.Instance">
            <summary>
            Get the singleton instance of the repository
            </summary>
        </member>
        <member name="T:MindHarbor.SingletonUtil.SingletonUserType">
            <summary>
            A Hibernate userType for singleton value
            </summary>
            <remarks>
            This type depends on <see cref="T:MindHarbor.SingletonUtil.SingletonRepository"/>
            </remarks>
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonUserType.Equals(System.Object,System.Object)">
            <summary>
            
                        Compare two instances of the class mapped by this type for persistent "equality"
                        ie. equality of persistent state
                        
            </summary>
            
            <param name="x"></param>
            <param name="y"></param>
            <returns>
            
            </returns>
            
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonUserType.GetHashCode(System.Object)">
            <summary>
            Get a hashcode for the instance, consistent with persistence "equality" 
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonUserType.NullSafeGet(System.Data.IDataReader,System.String[],System.Object)">
            <summary>
            
                        Retrieve an instance of the mapped class from a JDBC resultset.
                        Implementors should handle possibility of null values.
                        
            </summary>
            
            <param name="rs">a IDataReader</param>
            <param name="names">column names</param>
            <param name="owner">the containing entity</param>
            <returns>
            
            </returns>
            
            <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32)">
            <summary>
            
                        Write an instance of the mapped class to a prepared statement.
                        Implementors should handle possibility of null values.
                        A multi-column type should be written to parameters starting from index.
                        
            </summary>
            
            <param name="cmd">a IDbCommand</param>
            <param name="value">the object to write</param>
            <param name="index">command parameter index</param>
            <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MindHarbor.SingletonUtil.SingletonUserType.DeepCopy(System.Object)" -->
        <member name="M:MindHarbor.SingletonUtil.SingletonUserType.Replace(System.Object,System.Object,System.Object)">
            <summary>
            
                        During merge, replace the existing (<paramref name="target" />) value in the entity
                        we are merging to with a new (<paramref name="original" />) value from the detached
                        entity we are merging. For immutable objects, or null values, it is safe to simply
                        return the first parameter. For mutable objects, it is safe to return a copy of the
                        first parameter. For objects with component values, it might make sense to
                        recursively replace component values.
                        
            </summary>
            
            <param name="original">the value from the detached entity being merged</param>
            <param name="target">the value in the managed entity</param>
            <param name="owner">the managed entity</param>
            <returns>
            the value to be merged
            </returns>
            
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonUserType.Assemble(System.Object,System.Object)">
            <summary>
            
                        Reconstruct an object from the cacheable representation. At the very least this
                        method should perform a deep copy if the type is mutable. (optional operation)
                        
            </summary>
            
            <param name="cached">the object to be cached</param>
            <param name="owner">the owner of the cached object</param>
            <returns>
            a reconstructed object from the cachable representation
            </returns>
            
        </member>
        <member name="M:MindHarbor.SingletonUtil.SingletonUserType.Disassemble(System.Object)">
            <summary>
            
                        Transform the object into its cacheable representation. At the very least this
                        method should perform a deep copy if the type is mutable. That may not be enough
                        for some implementations, however; for example, associations must be cached as
                        identifier values. (optional operation)
                        
            </summary>
            
            <param name="value">the object to be cached</param>
            <returns>
            a cacheable representation of the object
            </returns>
            
        </member>
        <member name="P:MindHarbor.SingletonUtil.SingletonUserType.SqlTypes">
            <summary>
            
                        The SQL types for the columns mapped by this type. 
                        
            </summary>
            
        </member>
        <member name="P:MindHarbor.SingletonUtil.SingletonUserType.ReturnedType">
            <summary>
            
                        The type returned by 
            <c>NullSafeGet()</c>
            </summary>
            
        </member>
        <member name="P:MindHarbor.SingletonUtil.SingletonUserType.IsMutable">
            <summary>
            
                        Are objects of this type mutable?
                        
            </summary>
            
        </member>
    </members>
</doc>
